{"version":3,"sources":["UIbuilder/mainpage.js","App.js","serviceWorker.js","index.js"],"names":["CountDown","props","birthdayTimer","BirthdayTimer","supplyZeroToTheBeginning","anyNumber","formatDate","numberOfSeconds","seconds","minutes","Math","floor","hours","days","setShowHiddenMessage","setState","showHiddenMessage","state","document","getElementById","scrollIntoView","remainingTimeInSeconds","element","this","id","href","className","onClick","setInterval","parseInt","Date","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAkGA,SAASA,EAAUC,GACf,OACI,yEAC6C,6BAD7C,IACmD,6BAC9CA,EAAMC,e,IAuFJC,E,YAxEX,WAAYF,GAAO,IAAD,8BACd,4CAAMA,KAOVG,yBAA2B,SAAAC,GAAS,OAAKA,EAAY,GAAK,IAAIA,EAAWA,GARvD,EAWlBC,WAAa,SAACC,GACV,IAAIC,EAAUD,EAAgB,GAC1BE,EAAUC,KAAKC,MAAOJ,EAAgB,GAAI,IAC1CK,EAAQF,KAAKC,MAAMJ,EAAgB,KAAK,IACxCM,EAAOH,KAAKC,MAAMJ,EAAgB,MAAW,KAEjD,OAAO,EAAKH,yBAAyBS,GAAO,SAAU,EAAKT,yBAAyBQ,GAAQ,MAAQ,EAAKR,yBAAyBK,GAAU,MAAQ,EAAKL,yBAAyBI,IAjBpK,EAqBlBM,qBAAuB,WACnB,EAAKC,SAAS,CAAEC,mBAAoB,EAAKC,MAAMD,oBACtCE,SAASC,eAAe,oBAC9BC,kBAtBH,EAAKH,MAAQ,CACTI,uBAAwB,GACxBL,mBAAmB,GAJT,E,sEA2BT,IAEDM,EAFA,OA2BJ,OAvBKA,EADFC,KAAKN,MAAMD,kBACC,yBAAKQ,GAAG,uBACd,uBAAGC,KAAK,oBAAoBC,UAAU,qBAAtC,gBACA,yBAAKA,UAAU,mBAAmBF,GAAG,oBAArC,8IAC0I,6BAD1I,qHAEiH,6BAFjH,6GAGyG,6BAHzG,iFAI6E,6BAJ7E,sEAKkE,6BALlE,oCAMgC,6BANhC,wBAQD,6BAAK,6BARJ,uBASmB,6BATnB,sBAcK,yBAAKE,UAAU,uBAAsB,4BAAQA,UAAU,6BAA6BC,QAASJ,KAAKT,sBAA7D,eAGnDc,aAAY,WACR,EAAKb,SAAS,CAAEM,uBAAwBQ,UAAW,IAAIC,KAAK,wBAA0B,IAAIA,MAAS,SACpG,KAGC,6BACI,yBAAKJ,UAAU,kBAAf,IAAiC,8DACjC,yBAAKA,UAAU,SACX,kBAAC1B,EAAD,CAAWE,cAAeqB,KAAKjB,WAAWiB,KAAKN,MAAMI,2BAGzD,yBAAKK,UAAU,mBAAmBF,GAAG,oBAChCF,Q,GAhEOS,IAAMC,WCvGnBC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SD6H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48accd41.chunk.js","sourcesContent":["import React from 'react'\n\n// class MainPage extends React.Component{\n\n//     constructor(props){\n//         super(props);\n//         this.state = {\n//             name: ''\n//         }\n//     }\n\n//     handleNameChange = e => {\n//         this.setState({ name: e.target.value })\n//     }\n\n//    render() {\n//        return(\n//             <div>\n//                 <input type='text' name='name' value={this.state.name} onChange={this.handleNameChange} />\n//                 <User name={this.state.name} />\n//             </div>    \n//        )\n//    }\n\n// }\n\n// class User extends React.Component {\n\n//     render(){\n//         return(\n//             <div>\n//                 Hello { this.props.name }\n//             </div>\n//         )\n//     }\n\n// }\n\n//Components and Props\n// function Welcome(props){\n//     return <div> Hello, {props.name} </div>\n// }\n\n// function RenderWelcomeFiveTimes(){\n//     return(\n//         <div>\n//             <Welcome name=\"Raj\" />\n//             <Welcome name=\"Shekhar\" />\n//             <Welcome name=\"Sarah\" />\n//         </div>\n//     )\n// }\n\n// --> State and Lifecycle\n// Time spent on page\n\n// function Clock(props){\n//     return(\n//         <div>\n//             You have spent {props.timeSpent} seconds here.\n//         </div>\n//     )\n// }\n\n// class Tick extends React.Component{\n    \n//     constructor(props){\n//         super(props);\n//         this.state = {\n//             whenUSerEnteredThePage: new Date(),\n//             currentTime: new Date(),\n//             timeSpentHere: 0\n//         }\n//     }\n\n//     render(){\n//         // setInterval(() => {\n//         //     this.setState({ currentTime: new Date() }\n//         //     )\n//         // }, 1000)\n\n//         setInterval(()=>{\n//                 this.setState({ timeSpentHere: parseInt(this.state.timeSpentHere) + 1 })\n//             }, \n//         3000\n//         )\n//             console.log(this.state.timeSpentHere)\n//         return(\n//             // <Clock timeSpent={this.state.currentTime - this.state.whenUSerEnteredThePage} />\n//             <Clock timeSpent={this.state.timeSpentHere} />\n//         )\n//     }\n\n    \n// }\n\n\n\nfunction CountDown(props) {\n    return (\n        <div>\n            That special day I'm looking forward to: <br/> <br />\n            {props.birthdayTimer}\n        </div>\n    )\n}\n\n// function Element(props){\n//     if(props.hidden){\n//         return <div>Hidden Message</div>;\n//     }else{\n//         return <button onClick={props.clickHandler}> Click here </button>\n//     }\n// }\n\nclass BirthdayTimer extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            remainingTimeInSeconds: '',\n            showHiddenMessage: false\n        }\n    }\n\n    supplyZeroToTheBeginning = anyNumber =>  anyNumber < 10 ? '0'+anyNumber: anyNumber\n    \n\n    formatDate = (numberOfSeconds) => {\n        let seconds = numberOfSeconds%60;\n        let minutes = Math.floor((numberOfSeconds/60)%60);\n        let hours = Math.floor(numberOfSeconds/3600%24);\n        let days = Math.floor(numberOfSeconds/(60*60*24)%365);\n\n        return this.supplyZeroToTheBeginning(days)+ ' days '+ this.supplyZeroToTheBeginning(hours)+ ' : ' + this.supplyZeroToTheBeginning(minutes)+ ' : ' + this.supplyZeroToTheBeginning(seconds)\n        \n    }\n\n    setShowHiddenMessage = () => {\n        this.setState({ showHiddenMessage: !this.state.showHiddenMessage })\n        let el = document.getElementById('hiddenMessageDiv')\n        el.scrollIntoView();\n    }\n\n    render(){\n\n        let element;\n        if(this.state.showHiddenMessage){\n             element = <div id=\"hiddenMessageParent\">\n                 <a href=\"#theHiddenMessage\" className=\"hiddenMessageLink\">Open Message</a>\n                 <div className=\"theHiddenMessage\" id=\"theHiddenMessage\"> \n                I've been so lousy that a few days ago I made this timer which counts down to midnight of May the 3rd, the day I thought was your birthday.<br></br>\n                I realise this classifies to be more than a catastrophe and I know I'm probably not the best boyfriend you've had <br></br>\n                But I want you to know that I strive to be the brightest star in your life, just like you've been for me. <br></br>\n                And I can't wait for the day when we would celebrate either of ours together. <br></br>\n                It would taste so sweet. I mean, the cake. (not really, wink wink) <br></br>\n                Happy Belated Birthday, gorgeous.<br></br>\n                I'll always love you.\n                <br/><br/>\n                This is too cheesy. <br></br>\n                How was the cake?\n             </div>\n             </div>\n        } else{\n            element = <div className=\"hiddenMessageButton\"><button className=\"hiddenMessageReavealButton\" onClick={this.setShowHiddenMessage}> Press me </button></div>\n        }\n\n        setInterval(() => {\n            this.setState({ remainingTimeInSeconds: parseInt( (new Date(\"May 3, 2020 00:00:00\") - new Date()) /1000) })\n        }, 1000)\n\n        return(\n            <div>\n                <div className=\"welcomeMessage\"> <h1> My dearie little Jigglypuff </h1></div>\n                <div className=\"timer\">\n                    <CountDown birthdayTimer={this.formatDate(this.state.remainingTimeInSeconds)} />\n                </div>\n                {/* <Element hidden={this.state.showHiddenMessage} clickHandler={this.showHiddenMessage} /> */}\n                <div className=\"hiddenMessageDiv\" id=\"hiddenMessageDiv\">\n                    {element}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default BirthdayTimer;","import React from 'react';\nimport './App.css';\nimport MainPage from './UIbuilder/mainpage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}